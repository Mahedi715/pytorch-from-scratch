{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"name":"01_pytorch_workflow_exercises.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNYzatJtFkfUqqdiR6rYwVL","include_colab_link":true},"accelerator":"GPU","kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<a href=\"https://colab.research.google.com/github/mrdbourke/pytorch-deep-learning/blob/main/extras/exercises/01_pytorch_workflow_exercises.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>","metadata":{"id":"view-in-github","colab_type":"text"}},{"cell_type":"markdown","source":"# 01. PyTorch Workflow Exercise Template\n\n\n\nThe following is a template for the PyTorch workflow exercises.\n\n\n\nIt's only starter code and it's your job to fill in the blanks.\n\n\n\nBecause of the flexibility of PyTorch, there may be more than one way to answer the question.\n\n\n\nDon't worry about trying to be *right* just try writing code that suffices the question.\n\n\n\nYou can see one form of [solutions on GitHub](https://github.com/mrdbourke/pytorch-deep-learning/tree/main/extras/solutions) (but try the exercises below yourself first!).","metadata":{"id":"N8LsPXZti9Sw"}},{"cell_type":"code","source":"# Import necessary libraries\nimport torch\nimport matplotlib.pyplot as plt\nfrom torch import nn \nfrom torch import optim\n","metadata":{"id":"Glu2fM4dkNlx","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:32.943332Z","iopub.execute_input":"2024-10-22T19:41:32.943728Z","iopub.status.idle":"2024-10-22T19:41:32.948491Z","shell.execute_reply.started":"2024-10-22T19:41:32.943691Z","shell.execute_reply":"2024-10-22T19:41:32.947472Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"# Setup device-agnostic code\ndevice='cuda' if torch.cuda.is_available() else 'cpu'\nprint(torch.cuda.device_count())\n","metadata":{"id":"LqKhXY26m31s","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:32.960081Z","iopub.execute_input":"2024-10-22T19:41:32.960814Z","iopub.status.idle":"2024-10-22T19:41:32.965307Z","shell.execute_reply.started":"2024-10-22T19:41:32.960773Z","shell.execute_reply":"2024-10-22T19:41:32.964408Z"}},"outputs":[{"name":"stdout","text":"2\n","output_type":"stream"}],"execution_count":52},{"cell_type":"markdown","source":"## 1. Create a straight line dataset using the linear regression formula (`weight * X + bias`).\n\n  * Set `weight=0.3` and `bias=0.9` there should be at least 100 datapoints total. \n\n  * Split the data into 80% training, 20% testing.\n\n  * Plot the training and testing data so it becomes visual.\n\n\n\nYour output of the below cell should look something like:\n\n```\n\nNumber of X samples: 100\n\nNumber of y samples: 100\n\nFirst 10 X & y samples:\n\nX: tensor([0.0000, 0.0100, 0.0200, 0.0300, 0.0400, 0.0500, 0.0600, 0.0700, 0.0800,\n\n        0.0900])\n\ny: tensor([0.9000, 0.9030, 0.9060, 0.9090, 0.9120, 0.9150, 0.9180, 0.9210, 0.9240,\n\n        0.9270])\n\n```\n\n\n\nOf course the numbers in `X` and `y` may be different but ideally they're created using the linear regression formula.","metadata":{"id":"g7HUhxCxjeBx"}},{"cell_type":"code","source":"# Create the data parameters\nweight=0.3\nbias=0.9\n\n# Make X and y using linear regression feature\nX=torch.arange(0,10,0.1).unsqueeze(dim=1)\ny=weight*X+bias\n\n\n\nprint(f\"Number of X samples: {len(X)}\")\n\nprint(f\"Number of y samples: {len(y)}\")\n\nprint(f\"First 10 X & y samples:\\nX: {X[:10]}\\ny: {y[:10]}\")","metadata":{"id":"KbDG5MV7jhvE","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:32.980361Z","iopub.execute_input":"2024-10-22T19:41:32.980639Z","iopub.status.idle":"2024-10-22T19:41:32.988194Z","shell.execute_reply.started":"2024-10-22T19:41:32.980609Z","shell.execute_reply":"2024-10-22T19:41:32.987388Z"}},"outputs":[{"name":"stdout","text":"Number of X samples: 100\nNumber of y samples: 100\nFirst 10 X & y samples:\nX: tensor([[0.0000],\n        [0.1000],\n        [0.2000],\n        [0.3000],\n        [0.4000],\n        [0.5000],\n        [0.6000],\n        [0.7000],\n        [0.8000],\n        [0.9000]])\ny: tensor([[0.9000],\n        [0.9300],\n        [0.9600],\n        [0.9900],\n        [1.0200],\n        [1.0500],\n        [1.0800],\n        [1.1100],\n        [1.1400],\n        [1.1700]])\n","output_type":"stream"}],"execution_count":53},{"cell_type":"code","source":"# Split the data into training and testing\ntrain_split=int(len(X)*0.8)\nX_train=X[:train_split]\ny_train=y[:train_split]\nX_test=X[train_split:]\ny_test=y[train_split:]\n\nlen(X_train),len(y_train),len(X_test),len(y_test)\n\n","metadata":{"id":"GlwtT1djkmLw","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:32.993096Z","iopub.execute_input":"2024-10-22T19:41:32.993377Z","iopub.status.idle":"2024-10-22T19:41:33.000722Z","shell.execute_reply.started":"2024-10-22T19:41:32.993346Z","shell.execute_reply":"2024-10-22T19:41:32.999809Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"(80, 80, 20, 20)"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"# Plot the training and testing data \ndef plot_predictions(train_data = X_train,\n                 train_labels = y_train,\n                 test_data = X_test,\n                 test_labels = y_test,\n                 predictions = None):\n  plt.figure(figsize = (10,7))\n  plt.scatter(train_data,train_labels,c = 'b',s = 4,label = \"Training data\")\n  plt.scatter(test_data,test_labels,c = 'g',s = 4,label = \"Test data\")\n\n  if predictions is not None:\n    plt.scatter(test_data,predictions,c = 'r',s = 4,label = \"Predictions\")\n  plt.legend(prop = {\"size\" : 14})\nplot_predictions()\n","metadata":{"id":"29iQZFNhlYJ-","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:33.010162Z","iopub.execute_input":"2024-10-22T19:41:33.010430Z","iopub.status.idle":"2024-10-22T19:41:33.319537Z","shell.execute_reply.started":"2024-10-22T19:41:33.010399Z","shell.execute_reply":"2024-10-22T19:41:33.318577Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x700 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":55},{"cell_type":"markdown","source":"## 2. Build a PyTorch model by subclassing `nn.Module`. \n\n  * Inside should be a randomly initialized `nn.Parameter()` with `requires_grad=True`, one for `weights` and one for `bias`. \n\n  * Implement the `forward()` method to compute the linear regression function you used to create the dataset in 1. \n\n  * Once you've constructed the model, make an instance of it and check its `state_dict()`.\n\n  * **Note:** If you'd like to use `nn.Linear()` instead of `nn.Parameter()` you can.","metadata":{"id":"ImZoe3v8jif8"}},{"cell_type":"code","source":"# Create PyTorch linear regression model by subclassing nn.Module\nclass linerRegressionModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.linear = torch.nn.Linear(1, 1)\n    def forward(self,x : torch.Tensor) -> torch.Tensor:\n        return self.Linear_Layer(x)\n\ntorch.manual_seed(35)\nmodel=linerRegressionModel()\nmodel.state_dict()","metadata":{"id":"qzd__Y5rjtB8","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:33.321088Z","iopub.execute_input":"2024-10-22T19:41:33.321401Z","iopub.status.idle":"2024-10-22T19:41:33.331666Z","shell.execute_reply.started":"2024-10-22T19:41:33.321366Z","shell.execute_reply":"2024-10-22T19:41:33.330784Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"OrderedDict([('linear.weight', tensor([[-0.4759]])),\n             ('linear.bias', tensor([-0.7049]))])"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"# Instantiate the model and put it to the target device\nnext(model.parameters()).device\n\nmodel.to(device)\nlist(model.parameters())","metadata":{"id":"5LdcDnmOmyQ2","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:33.332720Z","iopub.execute_input":"2024-10-22T19:41:33.333041Z","iopub.status.idle":"2024-10-22T19:41:33.341774Z","shell.execute_reply.started":"2024-10-22T19:41:33.333010Z","shell.execute_reply":"2024-10-22T19:41:33.340878Z"}},"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"[Parameter containing:\n tensor([[-0.4759]], device='cuda:0', requires_grad=True),\n Parameter containing:\n tensor([-0.7049], device='cuda:0', requires_grad=True)]"},"metadata":{}}],"execution_count":57},{"cell_type":"markdown","source":"## 3. Create a loss function and optimizer using `nn.L1Loss()` and `torch.optim.SGD(params, lr)` respectively. \n\n  * Set the learning rate of the optimizer to be 0.01 and the parameters to optimize should be the model parameters from the model you created in 2.\n\n  * Write a training loop to perform the appropriate training steps for 300 epochs.\n\n  * The training loop should test the model on the test dataset every 20 epochs.","metadata":{"id":"G6nYOrJhjtfu"}},{"cell_type":"code","source":"class LinearRegressionModel(nn.Module):\n    def __init__(self):\n        super(LinearRegressionModel, self).__init__()\n        self.linear = nn.Linear(1, 1)  # Define the linear layer\n\n    def forward(self, x):\n        return self.linear(x)  # Forward pass through the linear layer\n\n# Instantiate the model\nmodel = LinearRegressionModel()\n\n# Check model parameters\nfor name, param in model.named_parameters():\n    print(name, param.data)\n\n# Example training setup\ncriterion = nn.MSELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\n\n# Send data to target device\nX_train = X_train.to(device)\nX_test = X_test.to(device)\ny_train = y_train.to(device)\ny_test = y_test.to(device)\nmodel=model.to(device)\n\n# Training loop\nfor epoch in range(3000):\n    # put model on train\n    model.train()\n    # forward pass\n    y_pred = model(X_train)\n    # calculate the loss\n    loss = criterion(y_pred, y_train)\n    # optimizer to zero grad\n    optimizer.zero_grad()\n    # backpropagate\n    loss.backward()\n    # optimizer step step\n    optimizer.step()\n\n    ### Perform testing every 20 epochs\n    if epoch % 10 == 0:\n    # Put model in evaluation mode and setup inference context \n        model.eval()\n        with torch.inference_mode():\n          # 1. Forward pass\n          y_preds = model(X_test)\n          # 2. Calculate test loss\n          test_loss = loss_fn(y_preds,y_test)\n          # Print out what's happening\n          print(f\"Epoch: {epoch} | Train loss: {loss:.3f} | Test loss: {test_loss:.3f}\")\n         ","metadata":{"id":"xpE83NvNnkdV","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:33.343889Z","iopub.execute_input":"2024-10-22T19:41:33.344216Z","iopub.status.idle":"2024-10-22T19:41:35.439640Z","shell.execute_reply.started":"2024-10-22T19:41:33.344184Z","shell.execute_reply":"2024-10-22T19:41:35.438788Z"}},"outputs":[{"name":"stdout","text":"linear.weight tensor([[0.8750]])\nlinear.bias tensor([-0.6200])\nEpoch: 0 | Train loss: 2.327 | Test loss: 2.531\nEpoch: 10 | Train loss: 0.571 | Test loss: 1.060\nEpoch: 20 | Train loss: 0.517 | Test loss: 1.005\nEpoch: 30 | Train loss: 0.469 | Test loss: 0.957\nEpoch: 40 | Train loss: 0.425 | Test loss: 0.911\nEpoch: 50 | Train loss: 0.385 | Test loss: 0.867\nEpoch: 60 | Train loss: 0.349 | Test loss: 0.825\nEpoch: 70 | Train loss: 0.316 | Test loss: 0.785\nEpoch: 80 | Train loss: 0.286 | Test loss: 0.748\nEpoch: 90 | Train loss: 0.259 | Test loss: 0.712\nEpoch: 100 | Train loss: 0.235 | Test loss: 0.677\nEpoch: 110 | Train loss: 0.213 | Test loss: 0.645\nEpoch: 120 | Train loss: 0.193 | Test loss: 0.614\nEpoch: 130 | Train loss: 0.175 | Test loss: 0.584\nEpoch: 140 | Train loss: 0.158 | Test loss: 0.556\nEpoch: 150 | Train loss: 0.144 | Test loss: 0.529\nEpoch: 160 | Train loss: 0.130 | Test loss: 0.504\nEpoch: 170 | Train loss: 0.118 | Test loss: 0.480\nEpoch: 180 | Train loss: 0.107 | Test loss: 0.457\nEpoch: 190 | Train loss: 0.097 | Test loss: 0.435\nEpoch: 200 | Train loss: 0.088 | Test loss: 0.414\nEpoch: 210 | Train loss: 0.079 | Test loss: 0.394\nEpoch: 220 | Train loss: 0.072 | Test loss: 0.375\nEpoch: 230 | Train loss: 0.065 | Test loss: 0.357\nEpoch: 240 | Train loss: 0.059 | Test loss: 0.340\nEpoch: 250 | Train loss: 0.054 | Test loss: 0.323\nEpoch: 260 | Train loss: 0.049 | Test loss: 0.308\nEpoch: 270 | Train loss: 0.044 | Test loss: 0.293\nEpoch: 280 | Train loss: 0.040 | Test loss: 0.279\nEpoch: 290 | Train loss: 0.036 | Test loss: 0.266\nEpoch: 300 | Train loss: 0.033 | Test loss: 0.253\nEpoch: 310 | Train loss: 0.030 | Test loss: 0.241\nEpoch: 320 | Train loss: 0.027 | Test loss: 0.229\nEpoch: 330 | Train loss: 0.024 | Test loss: 0.218\nEpoch: 340 | Train loss: 0.022 | Test loss: 0.208\nEpoch: 350 | Train loss: 0.020 | Test loss: 0.198\nEpoch: 360 | Train loss: 0.018 | Test loss: 0.188\nEpoch: 370 | Train loss: 0.016 | Test loss: 0.179\nEpoch: 380 | Train loss: 0.015 | Test loss: 0.170\nEpoch: 390 | Train loss: 0.013 | Test loss: 0.162\nEpoch: 400 | Train loss: 0.012 | Test loss: 0.154\nEpoch: 410 | Train loss: 0.011 | Test loss: 0.147\nEpoch: 420 | Train loss: 0.010 | Test loss: 0.140\nEpoch: 430 | Train loss: 0.009 | Test loss: 0.133\nEpoch: 440 | Train loss: 0.008 | Test loss: 0.127\nEpoch: 450 | Train loss: 0.007 | Test loss: 0.121\nEpoch: 460 | Train loss: 0.007 | Test loss: 0.115\nEpoch: 470 | Train loss: 0.006 | Test loss: 0.109\nEpoch: 480 | Train loss: 0.006 | Test loss: 0.104\nEpoch: 490 | Train loss: 0.005 | Test loss: 0.099\nEpoch: 500 | Train loss: 0.005 | Test loss: 0.094\nEpoch: 510 | Train loss: 0.004 | Test loss: 0.090\nEpoch: 520 | Train loss: 0.004 | Test loss: 0.085\nEpoch: 530 | Train loss: 0.003 | Test loss: 0.081\nEpoch: 540 | Train loss: 0.003 | Test loss: 0.077\nEpoch: 550 | Train loss: 0.003 | Test loss: 0.074\nEpoch: 560 | Train loss: 0.003 | Test loss: 0.070\nEpoch: 570 | Train loss: 0.002 | Test loss: 0.067\nEpoch: 580 | Train loss: 0.002 | Test loss: 0.064\nEpoch: 590 | Train loss: 0.002 | Test loss: 0.061\nEpoch: 600 | Train loss: 0.002 | Test loss: 0.058\nEpoch: 610 | Train loss: 0.002 | Test loss: 0.055\nEpoch: 620 | Train loss: 0.001 | Test loss: 0.052\nEpoch: 630 | Train loss: 0.001 | Test loss: 0.050\nEpoch: 640 | Train loss: 0.001 | Test loss: 0.047\nEpoch: 650 | Train loss: 0.001 | Test loss: 0.045\nEpoch: 660 | Train loss: 0.001 | Test loss: 0.043\nEpoch: 670 | Train loss: 0.001 | Test loss: 0.041\nEpoch: 680 | Train loss: 0.001 | Test loss: 0.039\nEpoch: 690 | Train loss: 0.001 | Test loss: 0.037\nEpoch: 700 | Train loss: 0.001 | Test loss: 0.035\nEpoch: 710 | Train loss: 0.001 | Test loss: 0.033\nEpoch: 720 | Train loss: 0.001 | Test loss: 0.032\nEpoch: 730 | Train loss: 0.000 | Test loss: 0.030\nEpoch: 740 | Train loss: 0.000 | Test loss: 0.029\nEpoch: 750 | Train loss: 0.000 | Test loss: 0.028\nEpoch: 760 | Train loss: 0.000 | Test loss: 0.026\nEpoch: 770 | Train loss: 0.000 | Test loss: 0.025\nEpoch: 780 | Train loss: 0.000 | Test loss: 0.024\nEpoch: 790 | Train loss: 0.000 | Test loss: 0.023\nEpoch: 800 | Train loss: 0.000 | Test loss: 0.021\nEpoch: 810 | Train loss: 0.000 | Test loss: 0.020\nEpoch: 820 | Train loss: 0.000 | Test loss: 0.019\nEpoch: 830 | Train loss: 0.000 | Test loss: 0.019\nEpoch: 840 | Train loss: 0.000 | Test loss: 0.018\nEpoch: 850 | Train loss: 0.000 | Test loss: 0.017\nEpoch: 860 | Train loss: 0.000 | Test loss: 0.016\nEpoch: 870 | Train loss: 0.000 | Test loss: 0.015\nEpoch: 880 | Train loss: 0.000 | Test loss: 0.014\nEpoch: 890 | Train loss: 0.000 | Test loss: 0.014\nEpoch: 900 | Train loss: 0.000 | Test loss: 0.013\nEpoch: 910 | Train loss: 0.000 | Test loss: 0.012\nEpoch: 920 | Train loss: 0.000 | Test loss: 0.012\nEpoch: 930 | Train loss: 0.000 | Test loss: 0.011\nEpoch: 940 | Train loss: 0.000 | Test loss: 0.011\nEpoch: 950 | Train loss: 0.000 | Test loss: 0.010\nEpoch: 960 | Train loss: 0.000 | Test loss: 0.010\nEpoch: 970 | Train loss: 0.000 | Test loss: 0.009\nEpoch: 980 | Train loss: 0.000 | Test loss: 0.009\nEpoch: 990 | Train loss: 0.000 | Test loss: 0.008\nEpoch: 1000 | Train loss: 0.000 | Test loss: 0.008\nEpoch: 1010 | Train loss: 0.000 | Test loss: 0.008\nEpoch: 1020 | Train loss: 0.000 | Test loss: 0.007\nEpoch: 1030 | Train loss: 0.000 | Test loss: 0.007\nEpoch: 1040 | Train loss: 0.000 | Test loss: 0.007\nEpoch: 1050 | Train loss: 0.000 | Test loss: 0.006\nEpoch: 1060 | Train loss: 0.000 | Test loss: 0.006\nEpoch: 1070 | Train loss: 0.000 | Test loss: 0.006\nEpoch: 1080 | Train loss: 0.000 | Test loss: 0.005\nEpoch: 1090 | Train loss: 0.000 | Test loss: 0.005\nEpoch: 1100 | Train loss: 0.000 | Test loss: 0.005\nEpoch: 1110 | Train loss: 0.000 | Test loss: 0.005\nEpoch: 1120 | Train loss: 0.000 | Test loss: 0.004\nEpoch: 1130 | Train loss: 0.000 | Test loss: 0.004\nEpoch: 1140 | Train loss: 0.000 | Test loss: 0.004\nEpoch: 1150 | Train loss: 0.000 | Test loss: 0.004\nEpoch: 1160 | Train loss: 0.000 | Test loss: 0.004\nEpoch: 1170 | Train loss: 0.000 | Test loss: 0.003\nEpoch: 1180 | Train loss: 0.000 | Test loss: 0.003\nEpoch: 1190 | Train loss: 0.000 | Test loss: 0.003\nEpoch: 1200 | Train loss: 0.000 | Test loss: 0.003\nEpoch: 1210 | Train loss: 0.000 | Test loss: 0.003\nEpoch: 1220 | Train loss: 0.000 | Test loss: 0.003\nEpoch: 1230 | Train loss: 0.000 | Test loss: 0.003\nEpoch: 1240 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1250 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1260 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1270 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1280 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1290 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1300 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1310 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1320 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1330 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1340 | Train loss: 0.000 | Test loss: 0.002\nEpoch: 1350 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1360 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1370 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1380 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1390 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1400 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1410 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1420 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1430 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1440 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1450 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1460 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1470 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1480 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1490 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1500 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1510 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1520 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1530 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1540 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1550 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1560 | Train loss: 0.000 | Test loss: 0.001\nEpoch: 1570 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1580 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1590 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1600 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1610 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1620 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1630 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1640 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1650 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1660 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1670 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1680 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1690 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1700 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1710 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1720 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1730 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1740 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1750 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1760 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1770 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1780 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1790 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1800 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1810 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1820 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1830 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1840 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1850 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1860 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1870 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1880 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1890 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1900 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1910 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1920 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1930 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1940 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1950 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1960 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1970 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1980 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 1990 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2000 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2010 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2020 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2030 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2040 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2050 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2060 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2070 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2080 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2090 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2100 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2110 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2120 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2130 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2140 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2150 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2160 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2170 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2180 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2190 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2200 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2210 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2220 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2230 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2240 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2250 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2260 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2270 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2280 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2290 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2300 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2310 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2320 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2330 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2340 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2350 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2360 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2370 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2380 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2390 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2400 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2410 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2420 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2430 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2440 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2450 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2460 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2470 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2480 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2490 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2500 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2510 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2520 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2530 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2540 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2550 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2560 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2570 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2580 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2590 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2600 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2610 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2620 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2630 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2640 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2650 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2660 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2670 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2680 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2690 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2700 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2710 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2720 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2730 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2740 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2750 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2760 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2770 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2780 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2790 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2800 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2810 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2820 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2830 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2840 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2850 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2860 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2870 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2880 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2890 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2900 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2910 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2920 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2930 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2940 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2950 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2960 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2970 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2980 | Train loss: 0.000 | Test loss: 0.000\nEpoch: 2990 | Train loss: 0.000 | Test loss: 0.000\n","output_type":"stream"}],"execution_count":58},{"cell_type":"markdown","source":"## 4. Make predictions with the trained model on the test data.\n\n  * Visualize these predictions against the original training and testing data (**note:** you may need to make sure the predictions are *not* on the GPU if you want to use non-CUDA-enabled libraries such as matplotlib to plot).","metadata":{"id":"x4j4TM18jwa7"}},{"cell_type":"code","source":"# Make predictions with the model\nmodel.eval()\nwith torch.inference_mode():\n    y_pred=model(X_test)\n\ny_preds","metadata":{"id":"bbMPK5Qjjyx_","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:35.440795Z","iopub.execute_input":"2024-10-22T19:41:35.441113Z","iopub.status.idle":"2024-10-22T19:41:35.450591Z","shell.execute_reply.started":"2024-10-22T19:41:35.441080Z","shell.execute_reply":"2024-10-22T19:41:35.449665Z"}},"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"tensor([[3.3000],\n        [3.3300],\n        [3.3600],\n        [3.3900],\n        [3.4200],\n        [3.4500],\n        [3.4800],\n        [3.5100],\n        [3.5400],\n        [3.5700],\n        [3.6000],\n        [3.6300],\n        [3.6600],\n        [3.6900],\n        [3.7200],\n        [3.7500],\n        [3.7800],\n        [3.8100],\n        [3.8400],\n        [3.8700]], device='cuda:0')"},"metadata":{}}],"execution_count":59},{"cell_type":"code","source":"# Plot the predictions (these may need to be on a specific device)\n\nplot_predictions(predictions = y_preds.cpu())","metadata":{"id":"K3BdmQaDpFo8","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:41:35.451831Z","iopub.execute_input":"2024-10-22T19:41:35.452130Z","iopub.status.idle":"2024-10-22T19:41:35.773408Z","shell.execute_reply.started":"2024-10-22T19:41:35.452099Z","shell.execute_reply":"2024-10-22T19:41:35.772535Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x700 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":60},{"cell_type":"markdown","source":"## 5. Save your trained model's `state_dict()` to file.\n\n  * Create a new instance of your model class you made in 2. and load in the `state_dict()` you just saved to it.\n\n  * Perform predictions on your test data with the loaded model and confirm they match the original model predictions from 4.","metadata":{"id":"s2OnlMWKjzX8"}},{"cell_type":"code","source":"\n\nfrom pathlib import Path\n\n# 1. Create models directory \nMODEL_PATH = Path(\"models\")\nMODEL_PATH.mkdir(parents = True,exist_ok = True)\n# 2. Create model save path \nMODEL_NAME = \"01_pytorch_model\"\nMODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME \n# 3. Save the model state dict\nprint(f\"Saving model to {MODEL_SAVE_PATH}\")\ntorch.save(obj = model.state_dict(),f = MODEL_SAVE_PATH)\n","metadata":{"id":"hgxhgD14qr-i","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:42:54.429625Z","iopub.execute_input":"2024-10-22T19:42:54.430549Z","iopub.status.idle":"2024-10-22T19:42:54.443002Z","shell.execute_reply.started":"2024-10-22T19:42:54.430506Z","shell.execute_reply":"2024-10-22T19:42:54.441998Z"}},"outputs":[{"name":"stdout","text":"Saving model to models/01_pytorch_model\n","output_type":"stream"}],"execution_count":65},{"cell_type":"code","source":"# Create new instance of model and load saved state dict (make sure to put it on the target device)\nloaded_model = LinearRegressionModel()\nloaded_model.load_state_dict(torch.load(f = MODEL_SAVE_PATH))\nloaded_model.to(device)","metadata":{"id":"P9vTgiLRrJ7T","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:43:34.435890Z","iopub.execute_input":"2024-10-22T19:43:34.436284Z","iopub.status.idle":"2024-10-22T19:43:34.446881Z","shell.execute_reply.started":"2024-10-22T19:43:34.436248Z","shell.execute_reply":"2024-10-22T19:43:34.445819Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/3504460075.py:3: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  loaded_model.load_state_dict(torch.load(f = MODEL_SAVE_PATH))\n","output_type":"stream"},{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"LinearRegressionModel(\n  (linear): Linear(in_features=1, out_features=1, bias=True)\n)"},"metadata":{}}],"execution_count":66},{"cell_type":"code","source":"\n# Make predictions with loaded model and compare them to the previous\ny_preds_new = loaded_model(X_test)\ny_preds == y_preds_new\n     ","metadata":{"id":"8UGX3VebrVtI","trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:44:08.242120Z","iopub.execute_input":"2024-10-22T19:44:08.243396Z","iopub.status.idle":"2024-10-22T19:44:08.253115Z","shell.execute_reply.started":"2024-10-22T19:44:08.243335Z","shell.execute_reply":"2024-10-22T19:44:08.251854Z"}},"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"tensor([[True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True],\n        [True]], device='cuda:0')"},"metadata":{}}],"execution_count":67},{"cell_type":"code","source":"loaded_model.state_dict()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-22T19:44:22.304711Z","iopub.execute_input":"2024-10-22T19:44:22.305124Z","iopub.status.idle":"2024-10-22T19:44:22.315016Z","shell.execute_reply.started":"2024-10-22T19:44:22.305088Z","shell.execute_reply":"2024-10-22T19:44:22.314094Z"}},"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"OrderedDict([('linear.weight', tensor([[0.3000]], device='cuda:0')),\n             ('linear.bias', tensor([0.9000], device='cuda:0'))])"},"metadata":{}}],"execution_count":68}]}